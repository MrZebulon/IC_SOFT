//
// Created by Samuel on 15/06/2023.
//

#ifndef IC_SOFT_STRUCTURES_HPP
#define IC_SOFT_STRUCTURES_HPP

#include <Eigen/Dense>

namespace icarus {

	/**
	 * Structure representing the state of the system\n
	 *
	 * - position in NED frame\n
	 * - velocity in NED frame\n
	 * - orientation (body -> NED)\n
	 * - angular velocity in body frame\n
	 */
	struct State {
		Eigen::Vector3d pos_ned;
		Eigen::Vector3d vel_ned;
		Eigen::Quaternion<double> q_nb;
		Eigen::Quaternion<double> w_b;

		static constexpr size_t STATE_LENGTH = 10;
		static State eigen_to_state(const Eigen::VectorXd& vect);
	};

	/**
	 * Structure representing commands being sent to the drone\n
	 *
	 * - roll\n
	 * - pitch\n
	 * - mean thrust\n
	 * - differential thrust\n
	 */
	struct Control {
		double roll;
		double pitch;
		double mean_thrust;
		double diff_thrust;

		static constexpr size_t CONTROL_LENGTH = 4;
		static Control eigen_to_control(const Eigen::VectorXd& vect);
	};


	/**
	 * Structure representing the drone's target points\n
	 *
	 * - position in NED frame\n
	 * - velocity in NED frame\n
	 * - orientation (body -> NED)\n
	 * - angular velocity in body frame\n

	 */
	struct Target {
		Eigen::Vector3d pos_ned;
		Eigen::Vector3d vel_ned;
		Eigen::Quaterniond q_nb;
		Eigen::Quaternion<double> w_b;
	};

	/**
	 * Structure representing sensor data\n
	 *
	 * data\n
	 * estimations of bias, noise and drift\n
	 *
	 */
	template<size_t n_bias, size_t n_noise, size_t n_drift>
	struct Sensor {
		Eigen::Matrix<double, n_bias, 1> data;

		Eigen::Matrix<double, n_bias, 1> bias;
		Eigen::Matrix<double, n_noise, 1> noise;
		Eigen::Matrix<double, n_drift, 1> drift;
	};

	/**
	 * Structure representing all data generated by the dynamical models (x_dot)\n
	 *
	 * - derivative of the position in NED frame\n
	 * - derivative of the velocity in NED frame\n
	 * - derivative of the orientation (body -> NED)\n
	 * - derivative of the angular velocity in body frame\n
	 * - airspeed\n
	 * - angle_of_attack\n
	 */
	struct SimulationOutput {
		Eigen::Vector3d d_pos_ned;
		Eigen::Vector3d d_vel_ned;
		Eigen::Quaterniond d_q_nb;
		Eigen::Quaterniond d_w_b;

		Eigen::Vector3d airspeed;
		double angle_of_attack;
	};

	/**
	 * Structure representing environment-related data\n
	 *
	 * - wind velocity\n
	 *
	 */
	struct Environment {
		Eigen::Vector3d wind_velocity_ned;
		double air_density_ground;
		double temperature;
		double humidity;
	};



}

#endif //IC_SOFT_STRUCTURES_HPP
